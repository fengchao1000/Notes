// <auto-generated />
using System;
using DigiKeyCrawler.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DigiKeyCrawler.Migrations
{
    [DbContext(typeof(DigiKeyProductContext))]
    [Migration("20201117063333_Init20201114")]
    partial class Init20201114
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DigiKeyCrawler.Models.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(36)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DefPdf")
                        .IsRequired()
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("DefPic")
                        .IsRequired()
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DetailedDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DigiKeyPartNumber")
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsNew")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ManufacturerProductNumber")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ManufacturerStandardLeadTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MayAlso")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Supplier")
                        .HasColumnType("varchar(200)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DigiKeyCrawler.Models.ProductAdditionalResource", b =>
                {
                    b.Property<Guid>("ProductAdditionalResourceKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ProductAdditionalResourceJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(36)");

                    b.HasKey("ProductAdditionalResourceKey");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAdditionalResourcess");
                });

            modelBuilder.Entity("DigiKeyCrawler.Models.ProductAttribute", b =>
                {
                    b.Property<Guid>("ProductAttributeKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ProductAttributeJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(36)");

                    b.HasKey("ProductAttributeKey");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributes");
                });

            modelBuilder.Entity("DigiKeyCrawler.Models.ProductCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DetailUrl")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<int>("ParentCategoryId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.ToTable("ProductCategorys");
                });

            modelBuilder.Entity("DigiKeyCrawler.Models.ProductDocument", b =>
                {
                    b.Property<Guid>("ProductDocumentKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ProductDocumentJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(36)");

                    b.HasKey("ProductDocumentKey");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDocuments");
                });

            modelBuilder.Entity("DigiKeyCrawler.Models.ProductEnvExportClassification", b =>
                {
                    b.Property<Guid>("ProductEnvExportClassificationKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ProductEnvExportClassificationJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(36)");

                    b.HasKey("ProductEnvExportClassificationKey");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductEnvExportClassifications");
                });

            modelBuilder.Entity("DigiKeyCrawler.Models.ProductHTML", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Html")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ProductId");

                    b.ToTable("ProductHTML");
                });

            modelBuilder.Entity("DigiKeyCrawler.Models.ProductPicture", b =>
                {
                    b.Property<Guid>("ProductPictureKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(36)");

                    b.HasKey("ProductPictureKey");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPictures");
                });

            modelBuilder.Entity("DigiKeyCrawler.Models.ProductPrice", b =>
                {
                    b.Property<Guid>("ProductPriceKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("ProductPriceJson")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ProductPriceKey");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPrices");
                });

            modelBuilder.Entity("DigiKeyCrawler.Models.ProductAdditionalResource", b =>
                {
                    b.HasOne("DigiKeyCrawler.Models.Product", "Product")
                        .WithMany("ProductAdditionalResources")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("DigiKeyCrawler.Models.ProductAttribute", b =>
                {
                    b.HasOne("DigiKeyCrawler.Models.Product", "Product")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("DigiKeyCrawler.Models.ProductDocument", b =>
                {
                    b.HasOne("DigiKeyCrawler.Models.Product", "Product")
                        .WithMany("ProductDocuments")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("DigiKeyCrawler.Models.ProductEnvExportClassification", b =>
                {
                    b.HasOne("DigiKeyCrawler.Models.Product", "Product")
                        .WithMany("ProductEnvExportClassifications")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("DigiKeyCrawler.Models.ProductHTML", b =>
                {
                    b.HasOne("DigiKeyCrawler.Models.Product", "Product")
                        .WithOne("ProductHTML")
                        .HasForeignKey("DigiKeyCrawler.Models.ProductHTML", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DigiKeyCrawler.Models.ProductPicture", b =>
                {
                    b.HasOne("DigiKeyCrawler.Models.Product", "Product")
                        .WithMany("ProductPictures")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("DigiKeyCrawler.Models.ProductPrice", b =>
                {
                    b.HasOne("DigiKeyCrawler.Models.Product", "Product")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductId");
                });
#pragma warning restore 612, 618
        }
    }
}
